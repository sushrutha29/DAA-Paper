import networkx as net
import matplotlib.pyplot as plot

def set_cover_problem(problem):
    nodes = set(node for subset in problem.values() for node in subset)
    subsets = list(problem.keys())
    
    uncover = set(nodes)
    solution = []
    
    while uncover:
        best_subset = max(subsets, key=lambda subset: len(problem[subset].intersection(uncover)))
        solution.append(best_subset)
        uncover -= problem[best_subset]
    
    return solution

def graph(problem, solution):
    G = net.Graph()
    
    for subset, nodes in problem.items():
        for node in nodes:
            G.add_edge(subset, node)
    
    position = net.spring_layout(G)
    
    net.draw_networkx_nodes(G, position, node_color='b', node_size=800)
    net.draw_networkx_labels(G, position)
    net.draw_networkx_edges(G, position)
    
    for subset in solution:
        net.draw_networkx_nodes(G, position, nodelist=[subset], node_color='g', node_size=800)
    
    plot.axis('off')
    plot.show()
problem = {
    'S1': {'1', '2'},
    'S2': {'3', '2', '4'},
    'S3': {'3', '2', '5'},
    'S4': {'1', '5'},
    'S5': {'3', '4'}
}

solution = set_cover_problem(problem)
print("The Solution for set cover problem is :", solution)

graph(problem, solution)

'''
output: The Solution for set cover problem is : ['S2', 'S4']
'''
